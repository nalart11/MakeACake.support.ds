import disnake
from disnake.ext import commands, tasks
from datetime import datetime, timedelta

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ä–æ–ª–µ–π
ADMIN_CHANNEL_ID = 0
ADMIN_ROLE_ID = 0
MUTE_ROLE_ID = 0

# –¢–æ–∫–µ–Ω Discord
TOKEN = 'YOUR_TOKEN'

intents = disnake.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix=">", intents=intents)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
active_chats = {}
# –°–ø–∏—Å–æ–∫ –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
muted_channels = []
# –°–ø–∏—Å–æ–∫ –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
muted_users = {}

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
translations = {
    'russian': {
        'choose_language': 'üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá¨üáß Choose your language / üá∑üá∏ –ò–∑–∞–±–µ—Ä–∏ —ò–µ–∑–∏–∫',
        'ask_question': '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
        'close_ticket': 'üîí –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
        'confirm_close_ticket': '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç?',
        'ticket_closed': '–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏ –∫–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.',
        'private_thread_created': '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≤–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.',
        'user_opened_ticket': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –æ—Ç–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç.',
        'back': '–ù–∞–∑–∞–¥'
    },
    'english': {
        'choose_language': 'üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá¨üáß Choose your language / üá∑üá∏ –ò–∑–∞–±–µ—Ä–∏ —ò–µ–∑–∏–∫',
        'ask_question': '‚ùì Ask a question',
        'close_ticket': 'üîí Close ticket',
        'confirm_close_ticket': 'Are you sure you want to close the ticket?',
        'ticket_closed': 'Ticket closed and channel deleted.',
        'private_thread_created': 'Private thread created. You can start a dialog.',
        'user_opened_ticket': 'User {user} opened a ticket.',
        'back': 'Back'
    },
    'serbian': {
        'choose_language': 'üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá¨üáß Choose your language / üá∑üá∏ –ò–∑–∞–±–µ—Ä–∏ —ò–µ–∑–∏–∫',
        'ask_question': '‚ùì –ü–æ—Å—Ç–∞–≤–∏—Ç–µ –ø–∏—Ç–∞—ö–µ',
        'close_ticket': 'üîí –ó–∞—Ç–≤–æ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç',
        'confirm_close_ticket': '–î–∞ –ª–∏ —Å—Ç–µ —Å–∏–≥—É—Ä–Ω–∏ –¥–∞ –∂–µ–ª–∏—Ç–µ –¥–∞ –∑–∞—Ç–≤–æ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç?',
        'ticket_closed': '–¢–∏–∫–µ—Ç —ò–µ –∑–∞—Ç–≤–æ—Ä–µ–Ω –∏ –∫–∞–Ω–∞–ª —ò–µ –æ–±—Ä–∏—Å–∞–Ω.',
        'private_thread_created': '–ü—Ä–∏–≤–∞—Ç–Ω–∞ —Ç–µ–º–∞ —ò–µ –Ω–∞–ø—Ä–∞–≤—ô–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –∑–∞–ø–æ—á–µ—Ç–∏ –¥–∏—ò–∞–ª–æ–≥.',
        'user_opened_ticket': '–ö–æ—Ä–∏—Å–Ω–∏–∫ {user} —ò–µ –æ—Ç–≤–æ—Ä–∏–æ —Ç–∏–∫–µ—Ç.',
        'back': '–ù–∞–∑–∞–¥'
    }
}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    unmute_users.start()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.slash_command(description="Start the bot")
async def start(inter):
    await inter.response.send_message(translations['russian']['choose_language'], view=LanguageSelectView(), ephemeral=True)

# –ö–ª–∞—Å—Å –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
class LanguageSelectView(disnake.ui.View):
    @disnake.ui.button(label="–†—É—Å—Å–∫–∏–π", style=disnake.ButtonStyle.primary)
    async def russian_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await send_main_menu(inter, 'russian')
    
    @disnake.ui.button(label="English", style=disnake.ButtonStyle.primary)
    async def english_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await send_main_menu(inter, 'english')
    
    @disnake.ui.button(label="–°—Ä–ø—Å–∫–∏", style=disnake.ButtonStyle.primary)
    async def serbian_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await send_main_menu(inter, 'serbian')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def send_main_menu(inter, language):
    await inter.response.edit_message(content=translations[language]['ask_question'], view=MainMenuView(language))

# –ö–ª–∞—Å—Å –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
class MainMenuView(disnake.ui.View):
    def __init__(self, language):
        super().__init__()
        self.language = language
        
        labels = self.get_labels(language)
        
        self.who_are_we_button.label = labels['who_are_we']
        self.partnership_button.label = labels['partnership']
        self.how_to_join_button.label = labels['how_to_join']
        self.change_language_button.label = labels['change_language']
        self.contact_us_button.label = labels['contact_us']
    
    @disnake.ui.button(style=disnake.ButtonStyle.secondary, row=0)
    async def who_are_we_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await self.send_info(inter, "–ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ" if self.language == 'russian' else 
                                     "Who are we" if self.language == 'english' else 
                                     "–ö–æ —Å–º–æ")
    
    @disnake.ui.button(style=disnake.ButtonStyle.secondary, row=1)
    async def partnership_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await self.send_info(inter, "–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ" if self.language == 'russian' else 
                                     "Partnership" if self.language == 'english' else 
                                     "–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ")
    
    @disnake.ui.button(style=disnake.ButtonStyle.secondary, row=2)
    async def how_to_join_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await self.send_info(inter, "–ö–∞–∫ –∫ –Ω–∞–º –ø–æ–ø–∞—Å—Ç—å" if self.language == 'russian' else 
                                     "How to get to us" if self.language == 'english' else 
                                     "–ö–∞–∫–æ –¥–æ—õ–∏ –¥–æ –Ω–∞—Å")
    
    @disnake.ui.button(style=disnake.ButtonStyle.secondary, row=3)
    async def change_language_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.edit_message(content=translations[self.language]['choose_language'], view=LanguageSelectView())
    
    @disnake.ui.button(style=disnake.ButtonStyle.secondary, row=4)
    async def contact_us_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await start_dialog(inter, self.language)
    
    async def send_info(self, inter, topic):
        if topic == "–ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ":
            await inter.response.edit_message(content="–ú—ã - MakeACake Studios, –º–æ–ª–æ–¥–∞—è —Å—Ç—É–¥–∏—è –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—è–≤–∏–≤—à–∞—è—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞. –ù–∞—à —Å–æ–∑–¥–∞—Ç–µ–ª—å - –í–µ–ª–∏–∫–∏–π –∏ –ú–æ–≥—É—á–∏–π @nalart11, –æ–Ω –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç –≤—Å–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º –∑–¥–µ—Å—å.", view=BackToMainMenuView(self.language))
        elif topic == "–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ":
            await inter.response.edit_message(content='–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤:\n[–ù–∞—à Discord –∫–∞–Ω–∞–ª](https://discord.com/invite/uKXcU3py3q)\n–ù–∞—à –¢–ì –∫–∞–Ω–∞–ª (–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)\n[–¢–ì –≤–ª–∞–¥–µ–ª—å—Ü–∞](https://t.me/nalart11)', view=BackToMainMenuView(self.language))
        elif topic == "–ö–∞–∫ –∫ –Ω–∞–º –ø–æ–ø–∞—Å—Ç—å":
            await inter.response.edit_message(content='–ù–∏–∫–∞–∫. üíÄ', view=BackToMainMenuView(self.language))
        elif topic == "Who are we":
            await inter.response.edit_message(content="We are MakeACake Studios, a young studio that recently appeared almost out of nowhere. Our creator is the Great and Powerful @nalart11, he basically directs everything that happens here.", view=BackToMainMenuView(self.language))
        elif topic == "Partnership":
            await inter.response.edit_message(content='To contact us you can use one of the following methods:\n[Our Discord channel](https://discord.com/invite/uKXcU3py3q)\nOur Telegramm channel (Temporarily unavailable)\n[Owner\'s Telegramm](https://t.me/nalart11)', view=BackToMainMenuView(self.language))
        elif topic == "How to get to us":
            await inter.response.edit_message(content='No way. üíÄ', view=BackToMainMenuView(self.language))
        elif topic == "–ö–æ —Å–º–æ":
            await inter.response.edit_message(content="–ú–∏ —Å–º–æ MakeACake Studios, –º–ª–∞–¥–∏ —Å—Ç—É–¥–∏–æ –∫–æ—ò–∏ —Å–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—ò–∞–≤–∏–æ –≥–æ—Ç–æ–≤–æ –Ω–∏–æ—Ç–∫—É–¥–∞. –ù–∞—à –∫—Ä–µ–∞—Ç–æ—Ä —ò–µ –í–µ–ª–∏–∫–∏ –∏ –ú–æ—õ–Ω–∏ @nalart11, –æ–Ω —É —Å—É—à—Ç–∏–Ω–∏ —Ä–µ–∂–∏—Ä–∞ —Å–≤–µ —à—Ç–æ —Å–µ –æ–≤–¥–µ –¥–µ—à–∞–≤–∞.", view=BackToMainMenuView(self.language))
        elif topic == "–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ":
            await inter.response.edit_message(content='–î–∞ –±–∏—Å—Ç–µ –Ω–∞—Å –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–∞–ª–∏, –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç–∏—Ç–∏ —ò–µ–¥–∞–Ω –æ–¥ —Å–ª–µ–¥–µ—õ–∏—Ö –º–µ—Ç–æ–¥–∞:\n[–ù–∞—à Discord –∫–∞–Ω–∞–ª](https://discord.com/invite/uKXcU3py3q)\n–ù–∞—à Telegramm –∫–∞–Ω–∞–ª (–ü—Ä–∏–≤—Ä–µ–º–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–∞–Ω)\n[Telegramm –∑–∞ –∫—Ä–µ–∞—Ç–æ—Ä–µ](https://t.me/nalart11)', view=BackToMainMenuView(self.language))
        elif topic == "–ö–∞–∫–æ –¥–æ—õ–∏ –¥–æ –Ω–∞—Å":
            await inter.response.edit_message(content='–ù–µ –¥–æ–ª–∞–∑–∏ —É –æ–±–∑–∏—Ä. üíÄ', view=BackToMainMenuView(self.language))

    def get_labels(self, language):
        labels = {}
        if language == 'russian':
            labels = {
                'who_are_we': "–ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ",
                'partnership': "–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ",
                'how_to_join': "–ö–∞–∫ –∫ –Ω–∞–º –ø–æ–ø–∞—Å—Ç—å",
                'change_language': "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
                'contact_us': "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º"
            }
        elif language == 'english':
            labels = {
                'who_are_we': "Who are we",
                'partnership': "Partnership",
                'how_to_join': "How to get to us",
                'change_language': "Change language",
                'contact_us': "Contact us"
            }
        elif language == 'serbian':
            labels = {
                'who_are_we': "–ö–æ —Å–º–æ",
                'partnership': "–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ",
                'how_to_join': "–ö–∞–∫–æ –¥–æ—õ–∏ –¥–æ –Ω–∞—Å",
                'change_language': "–ü—Ä–æ–º–µ–Ω–∏—Ç–µ —ò–µ–∑–∏–∫",
                'contact_us': "–ö–æ–Ω—Ç–∞–∫—Ç–∏—Ä–∞—ò—Ç–µ –Ω–∞—Å"
            }
        return labels

# –ö–ª–∞—Å—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
class BackToMainMenuView(disnake.ui.View):
    def __init__(self, language):
        super().__init__()
        self.language = language
        self.back_button.label = translations[language]['back']

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.primary)
    async def back_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await send_main_menu(inter, self.language)

# –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
class CloseTicketView(disnake.ui.View):
    def __init__(self, language):
        super().__init__()
        self.language = language

    @disnake.ui.button(label="üîí", style=disnake.ButtonStyle.danger)
    async def close_ticket_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.edit_message(content=translations[self.language]['confirm_close_ticket'], view=ConfirmCloseTicketView(inter.channel, self.language))

class ConfirmCloseTicketView(disnake.ui.View):
    def __init__(self, channel, language):
        super().__init__()
        self.channel = channel
        self.language = language

    @disnake.ui.button(label="üîí", style=disnake.ButtonStyle.danger)
    async def confirm_close_ticket_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await self.channel.delete()
        await inter.send(translations[self.language]['ticket_closed'])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≤–µ—Ç–∫–∏
async def start_dialog(inter, language):
    guild = inter.guild
    user = inter.author

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ ADMIN_CHANNEL_ID —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    category = guild.get_channel(ADMIN_CHANNEL_ID)
    if category is None or not isinstance(category, disnake.CategoryChannel):
        await inter.response.edit_message(content="–û—à–∏–±–∫–∞: ADMIN_CHANNEL_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≤–µ—Ç–∫–∏
    overwrites = {
        guild.default_role: disnake.PermissionOverwrite(read_messages=False),
        user: disnake.PermissionOverwrite(read_messages=True, send_messages=True),
        guild.get_role(ADMIN_ROLE_ID): disnake.PermissionOverwrite(read_messages=True, send_messages=True)
    }
    
    channel = await guild.create_text_channel(f'private-{user.name}', overwrites=overwrites, category=category)

    await channel.send(translations[language]['user_opened_ticket'].format(user=user.mention), view=CloseTicketView(language))
    
    await inter.response.edit_message(content=translations[language]['private_thread_created'], view=BackToMainMenuView(language))

# –ö–æ–º–∞–Ω–¥–∞ /admpan
@bot.slash_command(description="Admin Panel")
async def admpan(inter):
    if ADMIN_ROLE_ID in [role.id for role in inter.author.roles]:
        try:
            await inter.response.send_message(embed=create_admin_panel_embed(), view=AdminPanelView(), ephemeral=True)
        except disnake.Forbidden:
            await inter.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.", ephemeral=True)
    else:
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", ephemeral=True)

def create_admin_panel_embed():
    return disnake.Embed(
        title="Admin Panel v0.1b0",
        description="Powered by @nalart11\n\nCommands:",
        color=disnake.Color.blue()
    )

class AdminPanelView(disnake.ui.View):
    @disnake.ui.button(label="Mute channel", style=disnake.ButtonStyle.primary)
    async def channel_mute_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await send_channel_mute_options(inter)
    
    @disnake.ui.button(label="Mute user", style=disnake.ButtonStyle.primary)
    async def user_mute_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await send_user_mute_options(inter)

# Channel Mute
async def send_channel_mute_options(inter):
    embed = disnake.Embed(
        title="Choose option:",
        color=disnake.Color.blue()
    )
    view = ChannelMuteOptionsView()
    await inter.response.edit_message(embed=embed, view=view)

class ChannelMuteOptionsView(disnake.ui.View):
    @disnake.ui.button(label="Mute", style=disnake.ButtonStyle.danger)
    async def mute_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.edit_message(embed=disnake.Embed(title="–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º—É—Ç–∞:", color=disnake.Color.blue()), view=ChannelInputView(action="mute"))

    @disnake.ui.button(label="Unmute", style=disnake.ButtonStyle.success)
    async def unmute_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        if not muted_channels:
            embed = disnake.Embed(title="No muted channels.", color=disnake.Color.red())
            await inter.response.edit_message(embed=embed, view=BackToMainMenuView())
        else:
            await inter.response.edit_message(embed=disnake.Embed(title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–∑–º—å—é—Ç–∞:", color=disnake.Color.blue()), view=UnmuteChannelView())

    @disnake.ui.button(label="List", style=disnake.ButtonStyle.secondary)
    async def list_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        if not muted_channels:
            embed = disnake.Embed(title="No muted channels.", color=disnake.Color.red())
            await inter.response.edit_message(embed=embed, view=BackToMainMenuView())
        else:
            embed = disnake.Embed(title="Muted channels:", color=disnake.Color.blue())
            for i, channel in enumerate(muted_channels):
                embed.add_field(name=f"{i}. {channel.name}", value=f"<#{channel.id}>", inline=False)
            await inter.response.edit_message(embed=embed, view=BackToMainMenuView())

class ChannelInputView(disnake.ui.View):
    def __init__(self, action):
        super().__init__()
        self.action = action

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.edit_message(embed=create_admin_panel_embed(), view=AdminPanelView())

    @disnake.ui.button(label="–í–≤–µ—Å—Ç–∏ id –∫–∞–Ω–∞–ª–∞", style=disnake.ButtonStyle.primary)
    async def submit_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_modal(ChannelIDModal(action=self.action))

class ChannelIDModal(disnake.ui.Modal):
    def __init__(self, action):
        self.action = action
        components = [
            disnake.ui.TextInput(
                label="Channel ID",
                placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞",
                custom_id="channel_id",
                style=disnake.TextInputStyle.short
            )
        ]
        super().__init__(title="Channel ID", components=components)

    async def callback(self, inter: disnake.ModalInteraction):
        channel_id = inter.text_values["channel_id"]
        channel_id = int(channel_id)
        channel = inter.guild.get_channel(channel_id)
        if channel is None:
            await inter.response.send_message(embed=disnake.Embed(title="–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.", color=disnake.Color.red()), ephemeral=True)
            return

        if self.action == "mute":
            await mute_channel(inter, channel)
        else:
            await unmute_channel(inter, channel)

async def mute_channel(inter, channel):
    overwrite = channel.overwrites_for(inter.guild.default_role)
    overwrite.send_messages = False
    await channel.set_permissions(inter.guild.default_role, overwrite=overwrite)
    muted_channels.append(channel)
    embed = disnake.Embed(title=f"–ö–∞–Ω–∞–ª {channel.name} –∑–∞–º—å—é—á–µ–Ω.", color=disnake.Color.green())
    await inter.response.send_message(embed=embed, ephemeral=True, view=BackToMainMenuView())

async def unmute_channel(inter, channel):
    overwrite = channel.overwrites_for(inter.guild.default_role)
    overwrite.send_messages = True
    await channel.set_permissions(inter.guild.default_role, overwrite=overwrite)
    muted_channels.remove(channel)
    embed = disnake.Embed(title=f"–ö–∞–Ω–∞–ª {channel.name} —Ä–∞–∑–º—å—é—á–µ–Ω.", color=disnake.Color.green())
    await inter.response.send_message(embed=embed, ephemeral=True, view=BackToMainMenuView())

class UnmuteChannelView(disnake.ui.View):
    def __init__(self):
        super().__init__()
        for i, channel in enumerate(muted_channels):
            self.add_item(UnmuteButton(label=f"{channel.name}", custom_id=str(channel.id)))

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.edit_message(embed=create_admin_panel_embed(), view=AdminPanelView())

class UnmuteButton(disnake.ui.Button):
    def __init__(self, label, custom_id):
        super().__init__(label=label, custom_id=custom_id, style=disnake.ButtonStyle.primary)

    async def callback(self, inter: disnake.MessageInteraction):
        channel_id = int(self.custom_id)
        channel = inter.guild.get_channel(channel_id)
        await unmute_channel(inter, channel)

class BackToMainMenuView(disnake.ui.View):
    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.primary)
    async def back_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.edit_message(embed=create_admin_panel_embed(), view=AdminPanelView())

# User Mute
async def send_user_mute_options(inter):
    embed = disnake.Embed(
        title="Mute user options:",
        color=disnake.Color.blue()
    )
    view = UserMuteOptionsView()
    await inter.response.edit_message(embed=embed, view=view)

class UserMuteOptionsView(disnake.ui.View):
    @disnake.ui.button(label="Mute user", style=disnake.ButtonStyle.danger)
    async def mute_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.edit_message(embed=disnake.Embed(title="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º—É—Ç–∞:", color=disnake.Color.blue()), view=UserInputView(action="mute"))

    @disnake.ui.button(label="Unmute user", style=disnake.ButtonStyle.success)
    async def unmute_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        if not muted_users:
            embed = disnake.Embed(title="No muted users.", color=disnake.Color.red())
            await inter.response.edit_message(embed=embed, view=BackToMainMenuView())
        else:
            await inter.response.edit_message(embed=disnake.Embed(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–º—å—é—Ç–∞:", color=disnake.Color.blue()), view=UnmuteUserView())

class UserInputView(disnake.ui.View):
    def __init__(self, action):
        super().__init__()
        self.action = action

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.edit_message(embed=create_admin_panel_embed(), view=AdminPanelView())

    @disnake.ui.button(label="–í–≤–µ—Å—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", style=disnake.ButtonStyle.primary)
    async def submit_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_modal(UserNameModal(action=self.action))

class UserNameModal(disnake.ui.Modal):
    def __init__(self, action):
        self.action = action
        components = [
            disnake.ui.TextInput(
                label="User Name",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                custom_id="user_name",
                style=disnake.TextInputStyle.short
            )
        ]
        super().__init__(title="User Name", components=components)

    async def callback(self, inter: disnake.ModalInteraction):
        user_name = inter.text_values["user_name"]
        user = disnake.utils.get(inter.guild.members, name=user_name)
        if user is None:
            await inter.response.send_message(embed=disnake.Embed(title="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", color=disnake.Color.red()), ephemeral=True)
            return

        if self.action == "mute":
            await select_mute_duration(inter, user)

async def select_mute_duration(inter, user):
    embed = disnake.Embed(
        title="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞:",
        color=disnake.Color.blue()
    )
    view = MuteDurationSelectView(user)
    await inter.response.send_message(embed=embed, view=view, ephemeral=True)

class MuteDurationSelectView(disnake.ui.View):
    durations = {
        "60 seconds": 60,
        "5 minutes": 5 * 60,
        "10 minutes": 10 * 60,
        "30 minutes": 30 * 60,
        "1 hour": 60 * 60,
        "3 hours": 3 * 60 * 60,
        "6 hours": 6 * 60 * 60,
        "12 hours": 12 * 60 * 60,
        "24 hours": 24 * 60 * 60,
        "3 days": 3 * 24 * 60 * 60,
        "1 week": 7 * 24 * 60 * 60,
        "1 month": 30 * 24 * 60 * 60,
        "1 year": 365 * 24 * 60 * 60,
        "permanent": None
    }

    def __init__(self, user):
        super().__init__()
        self.user = user
        for label, duration in self.durations.items():
            self.add_item(MuteDurationButton(label=label, duration=duration, user=user))

class MuteDurationButton(disnake.ui.Button):
    def __init__(self, label, duration, user):
        super().__init__(label=label, style=disnake.ButtonStyle.primary)
        self.duration = duration
        self.user = user

    async def callback(self, inter: disnake.MessageInteraction):
        await mute_user(inter, self.user, self.duration)

async def mute_user(inter, user, duration):
    mute_role = inter.guild.get_role(MUTE_ROLE_ID)
    if mute_role is None:
        await inter.response.send_message(embed=disnake.Embed(title="–û—à–∏–±–∫–∞: –†–æ–ª—å –º—É—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", color=disnake.Color.red()), ephemeral=True)
        return
    
    await user.add_roles(mute_role)
    if duration:
        unmute_time = datetime.now() + timedelta(seconds=duration)
        muted_users[user.id] = unmute_time
        await inter.response.send_message(embed=disnake.Embed(title=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥.", color=disnake.Color.green()), ephemeral=True)
    else:
        muted_users[user.id] = None
        await inter.response.send_message(embed=disnake.Embed(title=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –∑–∞–º—å—é—á–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.", color=disnake.Color.green()), ephemeral=True)

# Unmute User
async def send_user_unmute_options(inter):
    embed = disnake.Embed(
        title="Unmute user options:",
        color=disnake.Color.blue()
    )
    view = UnmuteUserView()
    await inter.response.edit_message(embed=embed, view=view)

class UnmuteUserView(disnake.ui.View):
    def __init__(self):
        super().__init__()
        for user_id, unmute_time in muted_users.items():
            user = bot.get_user(user_id)
            if user:
                self.add_item(UnmuteUserButton(label=user.name, user_id=user_id))

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.edit_message(embed=create_admin_panel_embed(), view=AdminPanelView())

class UnmuteUserButton(disnake.ui.Button):
    def __init__(self, label, user_id):
        super().__init__(label=label, style=disnake.ButtonStyle.primary)
        self.user_id = user_id

    async def callback(self, inter: disnake.MessageInteraction):
        await unmute_user(inter, self.user_id)

async def unmute_user(inter, user_id):
    guild = inter.guild
    user = guild.get_member(user_id)
    if user:
        mute_role = guild.get_role(MUTE_ROLE_ID)
        if mute_role:
            await user.remove_roles(mute_role)
            del muted_users[user_id]
            await inter.response.send_message(embed=disnake.Embed(title=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} —Ä–∞–∑–º—å—é—á–µ–Ω.", color=disnake.Color.green()), ephemeral=True)

@tasks.loop(minutes=1)
async def unmute_users():
    now = datetime.now()
    to_unmute = [user_id for user_id, unmute_time in muted_users.items() if unmute_time and unmute_time <= now]
    for user_id in to_unmute:
        guild = bot.get_guild(ADMIN_CHANNEL_ID)
        if guild:
            user = guild.get_member(user_id)
            if user:
                mute_role = guild.get_role(MUTE_ROLE_ID)
                if mute_role:
                    await user.remove_roles(mute_role)
            del muted_users[user_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(TOKEN)